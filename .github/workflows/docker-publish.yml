name: Docker

on:
  push:
    # Publish `main` as Docker `latest` image.
    branches:
      - main

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

permissions:
  contents: read
  packages: write

env:
  IMAGE_NAME: offlineimap-docker

jobs:
  # Run tests.
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - name: Run tests
        run: |
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build
            docker-compose --file docker-compose.test.yml run sut
          else
            docker build . --file Dockerfile
          fi

  # Push image to GitHub Container Registry (ghcr.io).
  push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v5

      - name: Build image
        run: docker build . --file Dockerfile --tag image

      - name: Log into GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Tag and push image to ghcr.io
        run: |
          # Registry path
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}

          # Derive version from GITHUB_REF (branch or tag)
          # Strip the ref prefix (refs/heads/ or refs/tags/)
          VERSION=${GITHUB_REF#refs/*/}

          # If this is a tag like v1.2.3 -> strip leading 'v'
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            VERSION=${VERSION#v}
          fi

          # Use 'latest' for main branch pushes
          if [ "$VERSION" = "main" ]; then
            VERSION=latest
          fi

          echo "IMAGE_ID=$IMAGE_ID"
          echo "VERSION=$VERSION"

          docker tag image $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
